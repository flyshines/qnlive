<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="qingning.user.db.persistence.mybatis.FansMapper" >
  <resultMap id="BaseResultMap" type="qingning.user.db.persistence.mybatis.entity.Fans" >
    <id column="fans_id" property="fansId" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="lecturer_id" property="lecturerId" jdbcType="VARCHAR" />
    <result column="room_id" property="roomId" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_date" property="createDate" jdbcType="DATE" />
    <result column="position" property="position" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    fans_id, user_id, lecturer_id, room_id, create_time, create_date, position
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from t_fans
    where fans_id = #{fansId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from t_fans
    where fans_id = #{fansId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="qingning.user.db.persistence.mybatis.entity.Fans" >
    insert into t_fans (fans_id, user_id, lecturer_id,
    room_id, create_time, create_date,
    position)
    values (#{fansId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{lecturerId,jdbcType=VARCHAR},
    #{roomId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createDate,jdbcType=DATE},
    #{position,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="qingning.user.db.persistence.mybatis.entity.Fans" >
    insert into t_fans
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="fansId != null" >
        fans_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="lecturerId != null" >
        lecturer_id,
      </if>
      <if test="roomId != null" >
        room_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="position != null" >
        position,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="fansId != null" >
        #{fansId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="lecturerId != null" >
        #{lecturerId,jdbcType=VARCHAR},
      </if>
      <if test="roomId != null" >
        #{roomId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=DATE},
      </if>
      <if test="position != null" >
        #{position,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="qingning.user.db.persistence.mybatis.entity.Fans" >
    update t_fans
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="lecturerId != null" >
        lecturer_id = #{lecturerId,jdbcType=VARCHAR},
      </if>
      <if test="roomId != null" >
        room_id = #{roomId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=DATE},
      </if>
      <if test="position != null" >
        position = #{position,jdbcType=BIGINT},
      </if>
    </set>
    where fans_id = #{fansId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="qingning.user.db.persistence.mybatis.entity.Fans" >
    update t_fans
    set user_id = #{userId,jdbcType=VARCHAR},
    lecturer_id = #{lecturerId,jdbcType=VARCHAR},
    room_id = #{roomId,jdbcType=VARCHAR},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    create_date = #{createDate,jdbcType=DATE},
    position = #{position,jdbcType=BIGINT}
    where fans_id = #{fansId,jdbcType=VARCHAR}
  </update>

  <select id="findFansByUserIdAndRoomId" resultType="hashmap" parameterType="hashmap" >
    select
    <include refid="Base_Column_List" />
    from t_fans
    where user_id = #{user_id} and room_id = #{room_id}
  </select>

  <select id="findFanInfoByUserId" resultType="hashmap" parameterType="hashmap">
    select a.*, b.room_name, b.avatar_address from t_fans a, t_live_room b
    where a.room_id=b.room_id and a.user_id = #{user_id}
    <if test="notice_create_time != null" >
      and a.create_time <![CDATA[ < ]]> #{notice_create_time}
    </if>
    order by a.create_time desc limit #{page_count}
  </select>

  <delete id="deleteByUserIdAndRoomId" parameterType="java.lang.String" >
    delete from t_fans
    where user_id = #{user_id} and room_id = #{room_id}
  </delete>

</mapper>