<?xml version="1.0" encoding="UTF-8"?>
<servers>

	<server name="LectureServer">
		<default class="qingning.lecture.server.imp.LectureServerImpl">

			<function name="createLiveRoom">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
					<timesLimit millisecond="500" />
				</auth>
				<inputs>
					<param name="avatar_address" type="string" require="N"  />
					<param name="room_name" type="rstring" require="N"  format=".{0,30},100017"/>
					<param name="room_remark" type="rstring" require="N"  format=".{0,100},100018"/>
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="updateLiveRoom">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
					<timesLimit millisecond="500" />
				</auth>
				<inputs>
					<param name="avatar_address" type="string" require="N"  />
					<param name="room_name" type="rstring" require="N"  />
					<param name="room_remark" type="rstring" require="N"  />
					<param name="room_id" type="string" require="Y"  />
					<param name="update_time" type="long" require="Y,000100"  />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="liveRoom">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="query_type" type="string" require="Y,000100"  />
					<param name="room_id" type="string" validate="(query_type,room_id)=>{
					            var isEmpty= room_id==null || room_id.length == 0;
					            if(query_type != 0 &amp;&amp; isEmpty){
					               return false;
					            }
					       		return true;
					       		},100016"/>
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="createCourse">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
					<!--<timesLimit millisecond="100" />-->
				</auth>
				<inputs>
					<param name="course_title" type="rstring" require="Y,000100" />
					<param name="classify_id" type="string" require="N" />
					<param name="start_time" type="long" require="Y,000100"  />
					<param name="course_type" type="string" require="Y,000100"  format="^[0-2]$,100008"/>
					<param name="room_id" type="string" require="Y,000100"  />
					<param name="series_id" type="string" />
					<param name="updown" type="string" />
					<param name="course_price" type="double" require="N" validate="(course_type,course_price,course_password)=>{
						if(utils.isEqual('1', course_type)){
							if(utils.isEmpty(course_password)){
								return false;
							}
						} else if(utils.isEqual('2', course_type)){
							if(utils.isEmpty(course_price)){
								return false;
							}
						}
						return true;
					},000100"/>
					<param name="course_password" type="string" require="N" validate="(course_type,course_price,course_password)=>{
						if(utils.isEqual('1', course_type)){
							if(utils.isEmpty(course_password)){
								return false;
							}
						} else if(utils.isEqual('2', course_type)){
							if(utils.isEmpty(course_price)){
								return false;
							}
						}
						return true;
					},000100"/>
					<param name="course_url" type="string" require="N"  />
				</inputs>
				<outputs>
					<param name="course_id" type="string"/>
				</outputs>
			</function>

			<function name="courseDetail">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
				</inputs>
				<outputs>
					<param name="course_type" type="string"/>
					<param name="status" type="string"/>
					<param name="course_url" type="string"/>
					<param name="course_title" type="rstring"/>
					<param name="course_price" type="double"/>
					<param name="start_time" type="long"/>
					<param name="student_num" type="long"/>
					<param name="student_list" type="list"/>
					<param name="avatar_address" type="string"/>
					<param name="room_name" type="string"/>
					<param name="room_remark" type="rstring"/>
					<param name="course_remark" type="rstring"/>
					<param name="update_time" type="long"/>
					<param name="room_id" type="string"/>
					<param name="course_password" type="string"/>
					<param name="share_url" type="string"/>
					<param name="roles" type="list"/>
					<param name="im_course_id" type="string"/>
				</outputs>
			</function>

			<function name="updateCourse">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
					<timesLimit millisecond="1500" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
					<param name="course_title" type="rstring" require="N" format=".{0,30},100020"/>
					<param name="start_time" type="long" require="N"  />
					<param name="course_remark" type="rstring" require="N" format="[\s\S]{0,2048},100021"/>
					<param name="course_url" type="string" require="N"  />
					<param name="course_password" type="string" require="N"  />
					<param name="status" type="string" require="N"  validate="(status,course_title,start_time,course_remark,course_url,course_password)=>{
					       		var isEmpty= course_title==null || course_title.length == 0;
					       		isEmpty = isEmpty &amp;&amp; (course_remark == null || course_remark.length == 0);
					       		isEmpty = isEmpty &amp;&amp; (course_url == null || course_url.length == 0);
					       		isEmpty = isEmpty &amp;&amp; (course_password == null || course_password.length == 0);
					       		isEmpty = isEmpty &amp;&amp; start_time == null;					       		
					       		return !utils.isEqual(status,'2') || isEmpty;},100023"/>
					<param name="update_time" type="long" require="N"  validate="(status,update_time)=>{
					            var notChecked = utils.isEqual(status,'2') || !utils.isEmpty(update_time);
					       		return notChecked;},000100"/>
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="courseList">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="page_count" type="int" require="N"  />
					<param name="room_id"  type="string" require="N"  />
					<param name="course_id" type="string" require="N"/>
				</inputs>
				<outputs>
					<param name="course_num" type="long" default="0"/>
					<param name="course_list" type="list">
						<param name="course_id" type="string"/>
						<param name="status" type="string"/>
						<param name="course_url" type="string"/>
						<param name="course_title" type="rstring"/>
						<param name="start_time" type="long"/>
						<param name="student_num" type="long"/>						
						<param name="course_type" type="string"/>
						<param name="student" type="string"/>
						<param name="update_time" type="long"/>
						<param name="course_remark" type="rstring"/>
						<param name="course_amount" type="string" convert="(course_amount,course_type)=>{
							var ret = course_amount;
							if(utils.isEqual(course_type,'0')){
								ret='公开课程';
							} else if(utils.isEqual(course_type,'1')){
								ret='加密课程';
							} else {
							   ret = utils.convertObjectToDouble(course_amount,true);
							}
							return ret;
						}"/>
						<param name="total_amount" type="double" default="0" convert="(course_amount,extra_amount,course_type)=>{
						    var ret = 0;						
							if(utils.isEqual(course_type,'0') || utils.isEqual(course_type,'1')){
								ret=utils.convertObjectToLong(extra_amount);
							} else if(utils.isEqual(course_type,'2')){
								ret=utils.convertObjectToLong(course_amount)+utils.convertObjectToLong(extra_amount);								
							}												
							return ret;
						}"/>
						<param name="course_password" type="string"/>
						<param name="query_time" type="long" convert="(start_time, end_time, status)=>{
						    var ret = start_time;						
							if(utils.isEqual(status,'2')){
								ret=end_time;
								if(utils.isEmpty(ret)){
									ret = start_time;
								}
							}												
							return ret;
						}"/>
						<param name="im_course_id" type="string"/>
						<param name="position" type="long"/>
					</param>

				</outputs>
			</function>

			<function name="processCoursePPTs">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
					<timesLimit millisecond="100" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="courseInfo">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
				</inputs>
				<outputs>
					<param name="ppt_list" type="list">
						<param name="image_id" type="string"/>
						<param name="image_url" type="string"/>
						<param name="image_pos" type="long"/>
					</param>
					<param name="audio_list" type="list">
						<param name="audio_id" type="string"/>
						<param name="audio_url" type="string"/>
						<param name="audio_pos" type="long"/>
						<param name="audio_time" type="long"/>
						<param name="create_time" type="long"/>
						<param name="audio_image" type="string"/>
					</param>
					<param name="im_course_id" type="string"/>
					<param name="ban_user_id_list" type="list"/>
					<param name="student_num" type="long"/>
					<param name="start_time" type="long"/>
					<param name="status" type="string"/>
					<param name="course_type" type="string"/>
					<param name="course_password" type="string"/>
					<param name="share_url" type="string"/>
					<param name="course_update_time" type="long"/>	
					<param name="course_title" type="rstring"/>				
					<param name="course_url" type="string"/>
				</outputs>
			</function>

			<function name="messageList">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
				</inputs>
				<outputs>
					<param name="message_list" type="list">
						<param name="creator_avatar_address" type="string"/>
						<param name="creator_nick_name" type="rstring"/>
						<param name="message_pos" type="long"/>
						<param name="message_id" type="string"/>
						<param name="message_type" type="string"/>
						<param name="send_type" type="string"/>
						<param name="message" type="rstring"/>
						<param name="message_url" type="string"/>
						<param name="audio_time" type="long"/>
						<param name="create_time" type="long"/>
						<param name="creator_id" type="string"/>
						<param name="message_question" type="rstring"/>
					</param>
				</outputs>
			</function>

			<function name="courseStudents">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
					<param name="page_count" type="long"/>
					<param name="student_pos" type="long"/>
					<param name="data_source" type="string"/>
				</inputs>
				<outputs>
					<param name="student_num" type="long"/>
					<param name="student_list" type="list">
						<param name="avatar_address" type="string"/>
						<param name="nick_name" type="rstring"/>
						<param name="create_time" type="long"/>
						<param name="ban_status" type="string"/>
						<param name="user_id" type="string"/>
						<param name="student_pos" type="long"/>
						<param name="student_num" type="long"/>
						<param name="data_source" type="string"/>						
					</param>
				</outputs>
			</function>

			<function name="roomProfitList">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="page_count" type="int" require="N"/>
					<param name="query_time" type="long" require="N"  
					        validate="(query_time,course_id, position)=>{
					       		var isCourseEmpty = course_id ==null || course_id.length == 0; 
					       		var isTimeEmpty =  query_time == null;
					       		var isPositionEmpty =  position == null || position == 0;					       		
					       		return (isCourseEmpty &amp;&amp; isTimeEmpty &amp;&amp; isPositionEmpty) || (!isCourseEmpty &amp;&amp; !isTimeEmpty &amp;&amp; !isPositionEmpty); },000006"/>
					<param name="course_id" type="string" require="N"  
					        validate="(query_time,course_id, position)=>{
					       		var isCourseEmpty = course_id ==null || course_id.length == 0; 
					       		var isTimeEmpty =  query_time == null;
					       		var isPositionEmpty =  position == null || position == 0;					       		
					       		return (isCourseEmpty &amp;&amp; isTimeEmpty &amp;&amp; isPositionEmpty) || (!isCourseEmpty &amp;&amp; !isTimeEmpty &amp;&amp; !isPositionEmpty); },000006"/>
					<param name="room_id" type="string" require="Y,000100"  />
					<param name="position" type="long"  require="N"
					        validate="(query_time,course_id, position)=>{
					       		var isCourseEmpty = course_id ==null || course_id.length == 0; 
					       		var isTimeEmpty =  query_time == null;
					       		var isPositionEmpty =  position == null || position == 0;					       		
					       		return (isCourseEmpty &amp;&amp; isTimeEmpty &amp;&amp; isPositionEmpty) || (!isCourseEmpty &amp;&amp; !isTimeEmpty &amp;&amp; !isPositionEmpty); },000006"/>
				</inputs>
				<outputs>
					<param name="total_amount" type="double" default="0"/>
					<param name="cash_in_amount" type="double" default="0"/>
					<param name="course_list" type="list">
						<param name="status" type="string"/>
						<param name="student" type="string"/>
						<param name="course_title" type="rstring"/>
						<param name="start_time" type="long"/>
						<param name="student_num" type="long"/>
						<param name="course_amount" type="string" convert="(course_amount,course_type)=>{
							var ret = course_amount;
							if(course_type=='0'){
								ret='公开课程';
							} else if(course_type=='1'){
								ret='加密课程';
							} else {
							   ret = utils.convertObjectToDouble(course_amount,true);
							}
							return ret;
						}"/>
						<param name="extra_amount" type="double" default="0"/>
						<param name="total_amount" type="double" default="0" convert="(course_amount,extra_amount,course_type)=>{
						    var ret = 0;						
							if(utils.isEqual(course_type,'0') || utils.isEqual(course_type,'1')){
								ret=utils.convertObjectToLong(extra_amount);
							} else if(utils.isEqual(course_type,'2')){
								ret=utils.convertObjectToLong(course_amount)+utils.convertObjectToLong(extra_amount);								
							}												
							return ret;
						}"/>
						<param name="course_id" type="string"/>
						<param name="query_time" type="long" convert="(start_time, end_time, status)=>{
						    var ret = start_time;						
							if(utils.isEqual(status,'2')){
								ret=end_time;
							}												
							return ret;
						}"/>
						<param name="position" type="long"/>
					</param>
				</outputs>
			</function>

			<function name="courseProfitList">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="room_id" type="string" require="Y,000100"  />
					<param name="course_id" type="string" require="Y,000100"  />
					<param name="page_count" type="int" require="N"  />
					<param name="position" type="long" require="N"  />
					<param name="profit_type" type="string" require="N"  />
				</inputs>
				<outputs>
					<param name="course_title" type="rstring"/>
					<param name="start_time" type="long"/>
					<param name="student_num" type="long" default="0"/>
					<param name="course_amount" type="string" convert="(course_amount,course_type)=>{
							var ret = course_amount;
							if(course_type=='0'){
								ret='公开课程';
							} else if(course_type=='1'){
								ret='加密课程';
							} else {
							   ret = utils.convertObjectToDouble(course_amount,true);
							}
							return ret;
					}"/>
					<param name="extra_amount" type="double" default="0"/>
					<param name="total_amount" type="double" default="0" convert="(course_amount,extra_amount,course_type)=>{
						    var ret = 0;						
							if(utils.isEqual(course_type,'0') || utils.isEqual(course_type,'1')){
								ret=utils.convertObjectToLong(extra_amount);
							} else if(utils.isEqual(course_type,'2')){
								ret=utils.convertObjectToLong(course_amount)+utils.convertObjectToLong(extra_amount);								
							}												
							return ret;
					}"/>
					<param name="course_id" type="string"/>
					<param name="profit_list" type="list">
						<param name="profit_type" type="string"/>
						<param name="profit_amount" type="double" default="0"/>
						<param name="profit_desc" type="string" convert="(profit_type,student,distributer)=>{
							var ret = utils.RecoveryEmoji(student);
							if(!utils.isEqual(profit_type,'1')){
								if(!utils.isEmpty(distributer)){
								   ret = utils.RecoveryEmoji(student)+'通过'+utils.RecoveryEmoji(distributer)+'的分销';
								} else {
								   ret = utils.RecoveryEmoji(student);
								}
							}
							return ret;
						}"/>
						<param name="record_time" type="long" fieldname="create_time"/>	
						<param name="position" type="long"/>
					</param>
				</outputs>
			</function>

			<function name="distributionInfo">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>					
				</inputs>
				<outputs>
					<param name="room_distributer_num" type="long" default="0"/>
					<param name="room_recommend_num" type="long" default="0"/>
					<param name="room_done_num" type="long" default="0"/>
					<param name="room_done_num" type="long" default="0"/>
					<param name="room_distributer_done_num" type="long" default="0"/>
					<param name="course_distributer_num" type="long" default="0"/>
					<param name="course_recommend_num" type="long" default="0"/>
					<param name="course_done_num" type="long" default="0"/>
					<param name="course_distributer_done_num" type="long" default="0"/>
				</outputs>
			</function>
			<function name="roomDistributerInfo">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="page_count" type="int"/>
					<param name="position" type="long"/>
					<param name="distributer_id" type="string"/>
					<param name="room_id" type="string"/>					
				</inputs>
				<outputs>
					<param name="distributer_num" type="long"/>
					<param name="distributer_list" type="list">
						<param name="nick_name" type="rstring"/>
						<param name="avatar_address" type="string"/>
						<param name="room_id" type="string"/>
						<param name="distributer_id" type="string"/>
						<param name="total_amount" type="double"/>
						<param name="recommend_num" type="long"/>
						<param name="done_num" type="long"/>
						<param name="rq_code" type="string"/>
						<param name="profit_share_rate" type="double"/>
						<param name="effective_time" type="string" convert="(effective_time)=>{
						    var result='';
							if(utils.isEmpty(effective_time)){
								result = '已过期';
							} else if(utils.isEqual('0',effective_time)){
								result = '永久有效';
							} else if(utils.isEqual('1',effective_time)){
								result = '1个月内有效';
							} else if(utils.isEqual('2',effective_time)){
								result = '3个月内有效';
							} else if(utils.isEqual('3',effective_time)){
								result = '6个月内有效';
							} else if(utils.isEqual('4',effective_time)){
								result = '9个月内有效';
							} else if(utils.isEqual('5',effective_time)){
								result = '一年有效';
							} else if(utils.isEqual('6',effective_time)){
								result = '两年有效';
							}
							return result;
						}"/>
						<param name="position" type="long"/>						
					</param>
				</outputs>
			</function>
			
			<function name="roomDistributerCoursesInfo">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="room_id" type="string"/>
					<param name="distributer_id" type="string"/>
					<param name="page_count" type="int"/>
					<param name="start_time" type="long"/>					
				</inputs>
				<outputs>
					<param name="course_num" type="long" default="0"/>
					<param name="course_list" type="list">						
						<param name="course_title" type="rstring"/>
						<param name="start_time" type="long"/>
						<param name="course_price" type="double" default="0"/>	
						<param name="done_num" type="long" default="0"/>	
						<param name="total_amount" type="double"/>	
						<param name="course_id" type="string"/>
					</param>
				</outputs>
			</function>
			
			<function name="createRoomShareCode">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="100" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="type" type="string" default="0"/>
					<param name="profit_share_rate"  require="Y,000100" type="double" validate="(profit_share_rate)=>{
						var value = utils.convertObjectToLong(profit_share_rate);
						return value>=0 &amp;&amp; value &lt;=5000;
					},100024"/>
					<param name="effective_time" type="string" require="Y,000100" format="^[0-6]$,120020"/>
					<param name="room_id" type="string" require="Y,000100"/>		
				</inputs>
				<outputs>
					<param name="room_share_url" type="string"/>
					<param name="avatar_address" type="string"/>
					<param name="nick_name" type="rstring"/>
					<param name="room_name" type="rstring"/>
					<param name="profit_share_rate" type="double"/>
				</outputs>
			</function>
			
			<function name="createRoomDistributer">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
					<timesLimit millisecond="100" />
				</auth>
				<inputs>
					<param name="room_share_code" type="string" require="Y,000100"/>					
				</inputs>
				<outputs>					
				</outputs>
			</function>
			
			<function name="courseStatistics">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="page_count" type="int"/>
					<param name="course_id" type="course_id"  require="N"/>
				</inputs>
				<outputs>
					<param name="total_amount" type="double" default="0"/>
					<param name="course_num" type="long" default="0"/>
					<param name="total_student_num" type="long" default="0"/>
					<param name="course_list" type="list">
						<param name="student" type="string"/>
						<param name="course_title" type="rstring"/>
						<param name="total_amount" type="double" default="0" convert="(course_amount,extra_amount,course_type)=>{
						    var ret = 0;						
							if(utils.isEqual(course_type,'0') || utils.isEqual(course_type,'1')){
								ret=utils.convertObjectToLong(extra_amount);
							} else if(utils.isEqual(course_type,'2')){
								ret=utils.convertObjectToLong(course_amount)+utils.convertObjectToLong(extra_amount);								
							}												
							return ret;
						}"/>
						<param name="course_amount" type="string" convert="(course_amount,course_type)=>{
							var ret = course_amount;
							if(course_type=='0'){
								ret='公开课程';
							} else if(course_type=='1'){
								ret='加密课程';
							} else {
							   ret = utils.convertObjectToDouble(course_amount,true);
							}
							return ret;
						}"/>
						<param name="extra_amount"  type="double" default="0"/>
						<param name="start_time" type="long"/>
						<param name="status" type="string"/>
						<param name="course_id" type="string"/>	
						<param name="query_time" type="long" convert="(start_time, end_time, status)=>{
						    var ret = start_time;						
							if(utils.isEqual(status,'2')){
								ret=end_time;
							}												
							return ret;
						}"/>
						<param name="position" type="long"/>					
					</param>
				</outputs>
			</function>
			
			<function name="fanList">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="page_count" type="int" />
					<param name="position" type="long" />
					<param name="room_id" type="string" />										
				</inputs>
				<outputs>
					<param name="fans_num" type="long" />
					<param name="fan_list" type="list">
						<param name="avatar_address" type="string" />
						<param name="nick_name" type="rstring" />
						<param name="fans_id" type="string" />
						<param name="position" type="long" />
					</param>
				</outputs>
			</function>
			<function name="getCustomerService">
				<auth>
					<accessToken require="N" />
					<appName require="N" />
				</auth>
				<inputs>
				</inputs>
				<outputs>
				</outputs>
			</function>
			<function name="wechatTicketNotify">
				<auth>
					<accessToken require="N" />
				</auth>
				<inputs>
					<param name="verifyTicket" type="string" />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="wechatAuthRedirect">
				<auth>
					<accessToken require="N" />
					<appName require="N" />
				</auth>
				<inputs>
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="bindServiceNo">
				<auth>
					<accessToken require="N" />
					<appName require="N" />
				</auth>
				<inputs>
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="bindingRoom">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="appid" type="string" />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="verifyVerificationCode">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="verification_code" type="string" require="Y,00010"/>
					<param name="room_id" type="string" />
				</inputs>
				<outputs>
				</outputs>
			</function>
			<function name="delCourse">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,00010"/>
				</inputs>
				<outputs>
				</outputs>
			</function>
			<function name="createSeries">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="query_type" type="string"  require="Y,000100"/>
					<param name="series_title" type="rstring" require="Y,000100" />
					<param name="update_plan" type="long" require="Y,000100"  />
					<param name="series_type" type="string" require="Y,000100"  format="^[0-1]$,100008"/>
					<param name="series_price" type="double" require="N" validate="(series_type,series_price)=>{
					 if(utils.isEqual('1', series_type)){
							if(utils.isEmpty(series_price)){
								return false;
							}
						}
						return true;
					},000100"/>
					<param name="series_course_type" type="string" require="Y,000100"  format="^[0-3]$,100008"/>

					<param name="updown" type="string" require="Y,000100"  />
					<param name="room_id" type="string"  />
					<param name="shop_id" type="string"  />
				</inputs>
				<outputs>
					<param name="series_id" type="string" />
				</outputs>
			</function>
			<function name="updateSeries">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="series_remark" type="rstring"  />
					<param name="series_img" type="string"  />
					<param name="series_title" type="string"  />
					<param name="series_status" type="string"  />
				</inputs>
				<outputs>
				</outputs>
			</function>
			<function name="updown">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="query_type" type="string"  />
					<param name="updown_id" type="string"  />
					<param name="updown" type="string"  />
					<param name="query_from" type="string"  />
				</inputs>
				<outputs>
				</outputs>
			</function>
			<function name="updateSeriesCourse">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="query_type" type="string" require="Y,000100" />
					<param name="course_id" type="string"  require="Y,000100" />
					<param name="series_id" type="string" />
				</inputs>
				<outputs>
				</outputs>
			</function>
			<function name="updateSeriesCourseLonely">
				<auth>
					<accessToken require="Y" />
					<appName require="Y" />
				</auth>
				<inputs>
					<param name="course_id" type="string"  require="Y,000100" />
					<param name="course_type" type="string" require="Y,000100"  format="^[0-2]$,100008"/>
					<param name="classify_id" type="string" require="Y" default="9" />
					<param name="course_price" type="double" require="N" validate="(course_type,course_price,course_password)=>{
						if(utils.isEqual('1', course_type)){
							if(utils.isEmpty(course_password)){
								return false;
							}
						} else if(utils.isEqual('2', course_type)){
							if(utils.isEmpty(course_price)){
								return false;
							}
						}
						return true;
					},000100"/>
					<param name="course_password" type="string" require="N" validate="(course_type,course_price,course_password)=>{
						if(utils.isEqual('1', course_type)){
							if(utils.isEmpty(course_password)){
								return false;
							}
						} else if(utils.isEqual('2', course_type)){
							if(utils.isEmpty(course_price)){
								return false;
							}
						}
						return true;
					},000100"/>
				</inputs>
				<outputs>
				</outputs>
			</function>
		</default>

		<version num="1.0.0" class="">
		</version>
	</server>

</servers>
