<?xml version="1.0" encoding="UTF-8"?>
<servers>

	<server name="LectureServer">
		<default class="qingning.lecture.server.imp.LectureServerImpl">

			<function name="createLiveRoom">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="500" />
				</auth>
				<inputs>
					<param name="avatar_address" type="string" require="N"  />
					<param name="room_name" type="string" require="N"  format=".{0,30},100017"/>
					<param name="room_remark" type="string" require="N"  format=".{0,100},100018"/>
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="updateLiveRoom">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="500" />
				</auth>
				<inputs>
					<param name="avatar_address" type="string" require="N"  />
					<param name="room_name" type="string" require="N"  />
					<param name="room_remark" type="string" require="N"  />
					<param name="room_id" type="string" require="Y"  />
					<param name="update_time" type="long" require="Y,000100"  />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="liveRoom">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="50" />
				</auth>
				<inputs>
					<param name="query_type" type="string" require="Y,000100"  />
					<param name="room_id" type="string" validate="(query_type,room_id)=>{
					       		var isEmpty= room_id==null || room_id.length == 0;
					       		return query_type == 0 || !isEmpty;},100016"/>
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="createCourse">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="100" />
				</auth>
				<inputs>
					<param name="course_title" type="string" require="Y,000100"  format=".{0,30},100020"/>
					<param name="start_time" type="long" require="Y,000100"  />
					<param name="course_type" type="string" require="Y,000100"  format="^[0-2]$,100008"/>
					<param name="room_id" type="string" require="Y,000100"  />
					<param name="course_price" type="string" require="N"  />
					<param name="course_password" type="string" require="N"  />
					<param name="course_url" type="string" require="N"  />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="courseDetail">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="50" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="updateCourse">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="500" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
					<param name="course_title" type="string" require="N" format=".{0,30},100020"/>
					<param name="start_time" type="long" require="N"  />
					<param name="course_remark" type="string" require="N" format=".{0,200},100021"/>
					<param name="course_url" type="string" require="N"  />
					<param name="course_password" type="string" require="N"  />
					<param name="status" type="string" require="N"  validate="(status,course_title,start_time,course_remark,course_url,course_password)=>{
					       		var isEmpty= course_title==null || course_title.length == 0;
					       		isEmpty = isEmpty &amp;&amp; (course_remark == null || course_remark.length == 0);
					       		isEmpty = isEmpty &amp;&amp; (course_url == null || course_url.length == 0);
					       		isEmpty = isEmpty &amp;&amp; (course_password == null || course_password.length == 0);
					       		isEmpty = isEmpty &amp;&amp; start_time == null;					       		
					       		return status != 2 || isEmpty;},100023"/>
					<param name="update_time" type="long" require="Y,000100"  />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="courseList">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="10" />
				</auth>
				<inputs>
					<param name="page_count" type="long" require="N"  />
					<param name="room_id" type="string" require="N"  />
					<param name="start_time" type="long" require="N"
					       validate="(start_time,course_id)=>{
					       		var isCourseEmpty = course_id ==null || course_id.length == 0; 
					       		var isTimeEmpty =  start_time == null; 
					       		return (isCourseEmpty &amp;&amp; isTimeEmpty) || (!isCourseEmpty &amp;&amp; !isTimeEmpty);},000006"/>
					<param name="course_id" type="string" require="N"  
					       validate="(start_time,course_id)=>{
					       		var isCourseEmpty = course_id ==null || course_id.length == 0; 
					       		var isTimeEmpty =  start_time == null; 
					       		return (isCourseEmpty &amp;&amp; isTimeEmpty) || (!isCourseEmpty &amp;&amp; !isTimeEmpty);},000006"/>
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="processCoursePPTs">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="100" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="courseInfo">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="100" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="messageList">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="10" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
				</inputs>
				<outputs>
				</outputs>
			</function>

			<function name="courseStudents">
				<auth>
					<accessToken require="Y" />
					<timesLimit millisecond="10" />
				</auth>
				<inputs>
					<param name="course_id" type="string" require="Y,000100"  />
				</inputs>
				<outputs>
				</outputs>
			</function>

		</default>

		<version num="1.0.0" class="">
		</version>
	</server>

</servers>
