<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="qingning.mq.persistence.mybatis.CoursesStudentsMapper" >
  <resultMap id="BaseResultMap" type="qingning.mq.persistence.entity.CoursesStudents" >
    <id column="student_id" property="studentId" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="distributer_id" property="distributerId" jdbcType="VARCHAR" />
    <result column="lecturer_id" property="lecturerId" jdbcType="VARCHAR" />
    <result column="room_id" property="roomId" jdbcType="VARCHAR" />
    <result column="course_id" property="courseId" jdbcType="VARCHAR" />
    <result column="payment_amount" property="paymentAmount" jdbcType="BIGINT" />
    <result column="course_password" property="coursePassword" jdbcType="VARCHAR" />
    <result column="student_type" property="studentType" jdbcType="CHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_date" property="createDate" jdbcType="DATE" />
    <result column="student_pos" jdbcType="BIGINT" property="studentPos" />
  </resultMap>
  <sql id="Base_Column_List" >
    student_id, user_id, distributer_id, lecturer_id, room_id, course_id, payment_amount,
    course_password, student_type, create_time, create_date
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from t_courses_students
    where student_id = #{studentId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from t_courses_students
    where student_id = #{studentId,jdbcType=VARCHAR}
  </delete>
    <select id="findUserIdsByCourseId" resultType="string" parameterType="string" >
    select
    user_id
    from t_courses_students
    where 1 = 1
    and course_id = #{course_id}
  </select>
  
  <insert id="insert" parameterType="qingning.mq.persistence.entity.CoursesStudents" >
   insert into t_courses_students (student_id, user_id, distributer_id,
      lecturer_id, room_id, course_id,
      payment_amount, course_password, student_type,
      create_time, create_date, student_pos
      )
    values (#{studentId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{distributerId,jdbcType=VARCHAR},
      #{lecturerId,jdbcType=VARCHAR}, #{roomId,jdbcType=VARCHAR}, #{courseId,jdbcType=VARCHAR},
      #{paymentAmount,jdbcType=BIGINT}, #{coursePassword,jdbcType=VARCHAR}, #{studentType,jdbcType=CHAR},
      #{createTime,jdbcType=TIMESTAMP}, #{createDate,jdbcType=DATE}, #{studentPos,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="qingning.mq.persistence.entity.CoursesStudents" >
    insert into t_courses_students
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="distributerId != null" >
        distributer_id,
      </if>
      <if test="lecturerId != null" >
        lecturer_id,
      </if>
      <if test="roomId != null" >
        room_id,
      </if>
      <if test="courseId != null" >
        course_id,
      </if>
      <if test="paymentAmount != null" >
        payment_amount,
      </if>
      <if test="coursePassword != null" >
        course_password,
      </if>
      <if test="studentType != null" >
        student_type,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="studentPos != null">
        student_pos,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="distributerId != null" >
        #{distributerId,jdbcType=VARCHAR},
      </if>
      <if test="lecturerId != null" >
        #{lecturerId,jdbcType=VARCHAR},
      </if>
      <if test="roomId != null" >
        #{roomId,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=VARCHAR},
      </if>
      <if test="paymentAmount != null" >
        #{paymentAmount,jdbcType=BIGINT},
      </if>
      <if test="coursePassword != null" >
        #{coursePassword,jdbcType=VARCHAR},
      </if>
      <if test="studentType != null" >
        #{studentType,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=DATE},
      </if>
      <if test="studentPos != null">
        #{studentPos,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="qingning.mq.persistence.entity.CoursesStudents" >
    update t_courses_students
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="distributerId != null" >
        distributer_id = #{distributerId,jdbcType=VARCHAR},
      </if>
      <if test="lecturerId != null" >
        lecturer_id = #{lecturerId,jdbcType=VARCHAR},
      </if>
      <if test="roomId != null" >
        room_id = #{roomId,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=VARCHAR},
      </if>
      <if test="paymentAmount != null" >
        payment_amount = #{paymentAmount,jdbcType=BIGINT},
      </if>
      <if test="coursePassword != null" >
        course_password = #{coursePassword,jdbcType=VARCHAR},
      </if>
      <if test="studentType != null" >
        student_type = #{studentType,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=DATE},
      </if>
      <if test="studentPos != null">
        student_pos = #{studentPos,jdbcType=BIGINT},
      </if>
    </set>
    where student_id = #{studentId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="qingning.mq.persistence.entity.CoursesStudents" >
    update t_courses_students
    set user_id = #{userId,jdbcType=VARCHAR},
    distributer_id = #{distributerId,jdbcType=VARCHAR},
    lecturer_id = #{lecturerId,jdbcType=VARCHAR},
    room_id = #{roomId,jdbcType=VARCHAR},
    course_id = #{courseId,jdbcType=VARCHAR},
    payment_amount = #{paymentAmount,jdbcType=BIGINT},
    course_password = #{coursePassword,jdbcType=VARCHAR},
    student_type = #{studentType,jdbcType=CHAR},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    create_date = #{createDate,jdbcType=DATE},
     student_pos = #{studentPos,jdbcType=BIGINT}
    where student_id = #{studentId,jdbcType=VARCHAR}
  </update>

  <select id="findCourseStudentList" resultType="hashmap" parameterType="hashmap" >
    select
    cs.user_id, cs.create_time, cs.student_pos, u.nick_name, u.avatar_address
    from t_courses_students cs join t_user u on cs.user_id = u.user_id
    where 1 = 1
    and cs.course_id = #{course_id}
    <if test="student_pos != null" >
      and cs.student_pos <![CDATA[ < ]]> #{student_pos}
    </if>
    <if test="all_ban_user_id_list != null" >
      and cs.user_id not in
      <foreach collection="all_ban_user_id_list" item="item" index="index" open="("
               separator="," close=")">
        #{item}
      </foreach>
    </if>
    order by cs.student_pos desc

    limit #{page_count}
  </select>

  <select id="findBanUserListInfo" resultType="hashmap" parameterType="java.util.HashSet" >
    select
    u.user_id, u.nick_name, u.avatar_address, cs.create_time
    from t_courses_students cs join t_user u on cs.user_id = u.user_id
    where
    cs.user_id in
    <foreach collection="collection" item="item" index="index" open="("
             separator="," close=")">
      #{item}
    </foreach>
  </select>

  <select id="findLatestStudentAvatarAddList" resultType="string" parameterType="hashmap" >
    select
    u.avatar_address
    from t_courses_students cs join t_user u  on cs.user_id = u.user_id
    where 1 = 1
    and course_id = #{course_id}
    order by cs.create_time DESC
    limit #{size}
  </select>


  <select id="findStudentIdByCourseId" resultType="string" parameterType="string" >
    select
    user_id
    from t_courses_students
    where 1 = 1
    and course_id = #{course_id}
  </select>

</mapper>